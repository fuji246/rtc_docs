<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC6838 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6838.xml">
<!ENTITY RFC4855 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4855.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-chen-mmusic-smart-00.txt" category="std">

  <front>
    <title abbrev="SMART">Simple Media Annotation for Real-Time comunication</title>

    <author initials="W." surname="Chen" fullname="Wei Chen" role="editor">
      <organization>CVTE</organization>
      <address>
        <postal>
          <street>Gudang</street>
          <city>HangZhou</city>
          <code>320012</code>
          <country>China</country>
        </postal>
        <phone>+86-013858060444</phone>
        <email>oeichenwei@gmail.com</email>
      </address>
    </author>
    <author initials="J." surname="Fu" fullname="Jeromy Fu" role="editor">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street>Tasman</street>
          <city>San Jose</city>
          <code>88600</code>
          <country>USA</country>
        </postal>
        <phone>+358407796297</phone>
        <email>jeromyf@cisco.com</email>
      </address>
    </author>

    <date year="2018" month="October" day="10"/>

    <area>ART</area>
    <workgroup>mmusic</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>While AI technology arising, automatical video annotation, speech transcription
and similar such technologies are becoming mature. This document proposes one solution 
to transfer and sync such meta data along the media in the context of RTCWeb.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Nowdays, face tracking and face recognition have already made a great progress
and are widely adopted. Face tracking can be used to smart cropping of the video avoiding 
the face being cut, face recognition can be used to identify who are engaged in the 
communication by labelling the name in the video. Speech recognition technology 
becomes mature too, it is not surprised that speech can be automatically 
transcribed to text and assist the real time communications. AI technology can be applied 
to other use cases, like object tracking, emotion detecting, simultaneous translation and so on.</t>

<figure title="Vanallia Media Flow Topology" anchor="center-topo"><artwork><![CDATA[
                        +-----------------+
            +---------> | Media Processor +------------+
            |           +-----------------+            |
            |                                          |
            |                                          |
            |                                          |
            |                                          |
        +----+----+                               +-----v----+
        | Sender  |                               | Receiver |
        +---------+                               +----------+
]]></artwork></figure>

<t>In a real-time communication scenario like in <xref target="center-topo"/>, these intellegent 
processing can be done at sender, media processor or receiver. 
The advantage of doing it at receiver or media processor was backward 
compatibility but there are also disadvantages:</t>

<t><list style="numbers">
  <t>the media quality might degrade due to packet loss or delay on the network.</t>
  <t>either all receivers needs to repeat the computation or extra server 
resources are required to compute it.</t>
  <t>some meta data could be captured only on source side, for example, 
iPhone 3D camera could help extract more information than pure image 
processing.</t>
</list></t>

<t>This document will focus on methods to capture the media meta data at sender 
side and define how to transfer them along with media data to the receiver.</t>

<t>Mixing the meta data with media at the sender is one way to convey them to receivers
, but there are some drawbacks, take compositing annotation text onto the source
picture as an example:</t>

<t><list style="numbers">
  <t>If the video was degraded due to network, the text will be unclear.</t>
  <t>The receiver can not turn on/off the annotation on-demand.</t>
  <t>The receiver can not customize the utilization of such meta data.</t>
</list></t>

<t>This document proposes a new out-of-band payload to transfer them and synchornize
them through timestamp at receiver, rather than extending the current media 
payloads:</t>

<t><list style="numbers">
  <t>It is easier to achieve backward compatiblity.</t>
  <t>The transportation of the meta data could be different from the media.
For example, the face tracking information could be combined with the audio 
transcribed text and render together.</t>
</list></t>

<t>The mechanism described in this document can also be used to transfer other 
media meta data. For example, for dekstop sharing case, the mouse moving events 
can be transfered separately in this format, and we can achieve higher 
frame rate of mouse movement than the screen content.</t>

</section>
<section anchor="message-format" title="Message Format">

<figure title="Common Message Header" anchor="message-common-hdr"><artwork><![CDATA[
                    +---------------+---------------+
                    |0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|
                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                    | V |   RES | P |      Count    |
                    +---+-------+---+---------------+
]]></artwork></figure>

<t>The message will have 2 bytes header followed with an array of sub-messages. 
All sub-messages share the same common header as in <xref target="message-common-hdr"/>.</t>

<t><list style="hanging">
  <t hangText='V:'>
  Version. The version of this message, it should be set to 0.</t>
  <t hangText='RES:'>
  Reserved. The reserved field, should be set to 0 now.</t>
  <t hangText='P:'>
  Priority. The priority of the message, lower priority packets can be dropped or delayed.</t>
  <t hangText='Count:'>
  Count. The number of sub-messages embedded. There at least one submessage embedded, 
so the count plus one is the actual number of sub-messages.</t>
</list></t>

<section anchor="sub-message-common-header" title="Sub-message common header">

<figure title="General Sub-message Format" anchor="submessage-fmt"><artwork><![CDATA[
      +---------------+---------------+---------------+---------------+
      |0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     Type      |     Len       |              SSRC             |
      +---------------+---------------+---------------+---------------+
      |0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |            ...SSRC            |          Timestamp            |
      +---------------+---------------+---------------+---------------+
      |       ...Timestamp            |
      +---------------+---------------+
]]></artwork></figure>

<t>Each sub-message will have at least 10 bytes headers, the details are:</t>

<t><list style="hanging">
  <t hangText='Type:'>
  one-byte pre-defined sub-message type, see table 1.</t>
  <t hangText='Len:'>
  the length of the sub-message, not including the common header, in bytes</t>
  <t hangText='SSRC:'>
  4 bytes, the SSRC of the corresponding source</t>
  <t hangText='Timestamp:'>
  4 bytes, the timestamp of the corresponding source</t>
</list></t>

<t>This document defines 2 sub-message types and they can be extended in future.</t>

<figure title="Pre-defined Message Types" anchor="message-type"><artwork><![CDATA[
            +------------------+----------+
            |    Sub-message   |   Value  |  
            +------------------+----------+
            |  SMART_RECTS     |     0    |
            +------------------+----------+
            |  SMART_TEXTS     |     1    |
            +------------------+----------+
]]></artwork></figure>

</section>
<section anchor="smartrects" title="SMART_RECTS">

<figure title="SMART_RECTS Message Format" anchor="message-rects"><artwork><![CDATA[
      +---------------+---------------+---------------+---------------+
      |0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |S|I| Name Len  |               ID              |       Left    |
      +---------------+---------------+---------------+---------------+
      |    ...Lef     |             Top               |      Width    |
      +---------------+---------------+---------------+---------------+
      |    ...Width   |            Height             |     Name      |
      +---------------+---------------+---------------+---------------+
]]></artwork></figure>

<t>This pattern can be repeated, the total number of rectangles could be determined
from the length field of the sub-message common header. Each filed of this 
sub-message is defined as:</t>

<t><list style="hanging">
  <t hangText='S:'>
  controls the Width/Height fields. If it is 0, there is no Width/Height.</t>
  <t hangText='I:'>
  controls the ID field. If it is 0, there is no ID filed.</t>
  <t hangText='Name Len:'>
  the length of the name field, it can between 0 - 63.</t>
  <t hangText='ID:'>
  the identifier of the rectangle, value is defined by the app.</t>
  <t hangText='Left/Top:'>
  2 bytes each, the left top point of the rectangle.</t>
  <t hangText='Width/Height:'>
  2 bytes each, the width and height of the rectangle.</t>
  <t hangText='Name:'>
  the null-terminated UTF-8 string of the name tagging that rectangle, up to 63 bytes.</t>
</list></t>

</section>
<section anchor="smarttexts" title="SMART_TEXTS">

<figure title="SMART_TEXTS Message Format" anchor="message-texts"><artwork><![CDATA[
      +---------------+---------------+---------------+---------------+
      |0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|0|1|2|3|4|5|6|7|
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |T|   Text Len  |          Time Offset          |     Text      |
      +---------------+---------------+---------------+---------------+
]]></artwork></figure>

<t>Similar to the SMART_RECTS, each filed of this sub-message is defined as:</t>

<t><list style="hanging">
  <t hangText='T:'>
  control if Time Offset field was present or not,</t>
  <t hangText='Text Len:'>
  the length of the Name field minor 1, the name length can be 1-128,</t>
  <t hangText='Time Offset:'>
  the millisecond time offset corresponding to the timestamp,</t>
  <t hangText='Text:'>
  A string in UTF-8 encoding.</t>
</list></t>

</section>
</section>
<section anchor="sdp-negotiation" title="SDP Negotiation">

<t>The message can be sent along with RTP stream as RTP payload, it can also be 
sent through Data Channel in SCTP.</t>

<t>When it is sent through RTP stream, it can be multiplexed with either Audio or 
Video stream with its own sequence space and separate SSRC, the payload type 
can be negotiated with dynamic payloads.</t>

<t>Resilience technologies like FEC and RTP retransmission can be used on the
annotation stream to provide some kind of reliablity when packet loss. Or in
separate RTP session over realiabe channel like SCTP or TCP.</t>

<section anchor="media-type-registration" title="Media Type Registration">

<t>Media type registration is done according to <xref target="RFC6838"></xref> and <xref target="RFC4855"></xref>.</t>

<t><list style="hanging">
  <t hangText='Type name:'>
  application</t>
  <t hangText='Subtype name:'>
  annotation</t>
  <t hangText='Required parameters:'>
        <list style="hanging">
        <t hangText='type:'>
        supported sub-message type values, use vertical bar to concatenate, 
for example, type=0|1, means it will generate both SMART_RECTS and 
SMART_TEXTS. The type indicates how many payloads it could be encoded in 
the source side.</t>
        <t hangText='Optional parameters:'>
                    <list style="hanging">
              <t hangText='minptime:'>
              the minimum interval of such meta data</t>
              <t hangText='maxbitrate:'>
              the maximum bitrate of such meta data, in kbps units</t>
            </list>
        </t>
      </list>
  </t>
</list></t>

</section>
<section anchor="example" title="Example">

<figure title="Example SDP Offer with SMART Support" anchor="sdp-example"><artwork><![CDATA[
    m=audio 5004 UDP/TLS/RTP/SAVPF 111 104
    c=IN IP4 47.98.240.10
    a=rtcp:9 IN IP4 0.0.0.0
    a=mid:audio
    a=sendrecv
    a=rtcp-mux
    a=rtpmap:111 opus/48000/2
    a=fmtp:111 minptime=10;sprop-stereo=0;stereo=0;usedtx=0;useinbandfec=1
    a=rtpmap:104 annotation/1000
    a=fmtp:104 type=0|1;maxbitrate=2
]]></artwork></figure>

<t>In this example, 104 was selected for the media annotation and it will send 
along with audio stream.</t>

</section>
<section anchor="send-through-data-channel" title="Send Through Data Channel">

<t>TODO?</t>

</section>
</section>
<section anchor="rtcweb-implicition" title="RTCWeb implicition">

<t>To achieve the synced video annotation, RTCWeb needs to open interface for 
application operating the rendering of the annotation with the video. Exposure 
of the video raw data to JS layer and let application renders it with Canvas or 
WebGL would be a good choice.</t>

</section>
<section anchor="compatible" title="Compatible">

<t>When the legacy endpoints received such an OFFER, it can just ignore the payload.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Such meta data could be privacy as the same level of the media, sender can 
decide to not distribute them. The meta data should be encrypted in the transer 
and it should also support end to end encription.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>"application/annotation" media type should be registered as defined in <xref target="RFC6838"></xref>.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>https://www.iana.org/assignments/media-types/media-types.xhtml</t>

<t>http://asciiflow.com/</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC6838;
&RFC4855;


    </references>

    <references title='Informative References'>

<reference anchor="REST" >
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author initials="R." surname="Fielding" fullname="Roy Fielding">
      <organization>University of California, Irvine</organization>
    </author>
    <date year="2000"/>
  </front>
</reference>


    </references>



  </back>

<!-- ##markdown-source:
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
VZmlvj+6893tRWrWdOn2KPoPHw4E47QuAAA=

-->

</rfc>

